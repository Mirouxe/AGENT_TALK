"""
Script pour configurer l'option Status de Notion
"""
import os
from dotenv import load_dotenv
from notion_client import Client

load_dotenv()

print("="*70)
print("‚öôÔ∏è  CONFIGURATION DE LA PROPRI√âT√â STATUS")
print("="*70)
print()

notion_key = os.getenv('NOTION_API_KEY')
database_id = os.getenv('NOTION_DATABASE_ID')

notion = Client(auth=notion_key)

try:
    database = notion.databases.retrieve(database_id)
    properties = database.get('properties', {})
    status_prop = properties.get('Status', {})
    status_type = status_prop.get('type')
    
    print(f"üìã Type de la propri√©t√© Status: {status_type}")
    print()
    
    # R√©cup√©rer les options disponibles
    if status_type == 'status':
        options = status_prop.get('status', {}).get('options', [])
    elif status_type == 'select':
        options = status_prop.get('select', {}).get('options', [])
    else:
        print("‚ùå Type de Status non reconnu")
        exit(1)
    
    print(f"üìå Options actuellement disponibles dans votre base:")
    print()
    
    if not options:
        print("   ‚ùå Aucune option trouv√©e!")
        print()
        print("üîß Solution:")
        print("   1. Ouvrez votre base de donn√©es dans Notion")
        print("   2. Cliquez sur la colonne 'Status'")
        print("   3. Ajoutez une option nomm√©e: '√Ä classer'")
        print("   4. Relancez ce script")
        print()
        exit(1)
    
    for i, opt in enumerate(options, 1):
        option_name = opt.get('name', 'Sans nom')
        option_color = opt.get('color', '')
        print(f"   {i}. {option_name} ({option_color})")
    
    print()
    
    # V√©rifier si "√Ä classer" existe
    has_a_classer = any(opt.get('name') == '√Ä classer' for opt in options)
    
    if has_a_classer:
        print("‚úÖ L'option '√Ä classer' existe d√©j√†!")
        print("   Votre configuration est parfaite!")
        print()
        print("üöÄ Lancez maintenant: python test_pipeline.py")
        print()
    else:
        print("‚ö†Ô∏è  L'option '√Ä classer' n'existe pas.")
        print()
        print("üîß SOLUTIONS:")
        print()
        print("Option 1 - Ajouter '√Ä classer' dans Notion (RECOMMAND√â):")
        print("   1. Ouvrez votre base de donn√©es dans Notion")
        print("   2. Cliquez sur l'en-t√™te de la colonne 'Status'")
        print("   3. En bas du menu, cliquez sur '+ Nouvelle option'")
        print("   4. Tapez: √Ä classer")
        print("   5. Choisissez une couleur (ex: orange)")
        print("   6. Relancez: python test_pipeline.py")
        print()
        print("Option 2 - Utiliser une option existante:")
        print("   Je peux configurer l'application pour utiliser une de vos")
        print("   options existantes au lieu de '√Ä classer'")
        print()
        
        choix = input("Voulez-vous utiliser une option existante? (o/n): ").strip().lower()
        
        if choix == 'o' or choix == 'oui' or choix == 'y' or choix == 'yes':
            print()
            print("Quelle option voulez-vous utiliser?")
            for i, opt in enumerate(options, 1):
                print(f"   {i}. {opt.get('name')}")
            
            while True:
                try:
                    choix_num = int(input(f"\nChoisissez un num√©ro (1-{len(options)}): "))
                    if 1 <= choix_num <= len(options):
                        selected_option = options[choix_num - 1]['name']
                        print()
                        print(f"‚úÖ Option s√©lectionn√©e: {selected_option}")
                        print()
                        print("‚ö†Ô∏è  ATTENTION: Cette fonctionnalit√© n√©cessiterait de modifier")
                        print("   le code source. Pour le moment, je recommande plut√¥t:")
                        print()
                        print(f"   1. D'ajouter l'option '√Ä classer' dans Notion")
                        print(f"   2. OU de laisser la propri√©t√© Status vide")
                        print()
                        break
                    else:
                        print("Num√©ro invalide, r√©essayez.")
                except ValueError:
                    print("Entr√©e invalide, r√©essayez.")
        else:
            print()
            print("D'accord! Ajoutez l'option '√Ä classer' dans Notion")
            print("puis relancez: python test_pipeline.py")
            print()

except Exception as e:
    print(f"‚ùå Erreur: {str(e)}")
    exit(1)

